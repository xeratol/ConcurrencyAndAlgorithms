#pragma kernel SolveRow
#pragma kernel SolveCol

struct Complex
{
    double real;
    double imag;
};

#define TEMP_SIZE 512                   // WIDTH and HEIGHT is capped at TEMP_SIZE * 2

uint WIDTH;                             // power of 2
StructuredBuffer<uint> BitRevRow;       // size of WIDTH
StructuredBuffer<Complex> TwiddleRow;   // size of WIDTH / 2

uint HEIGHT;                            // power of 2
StructuredBuffer<uint> BitRevCol;       // size of HEIGHT
StructuredBuffer<Complex> TwiddleCol;   // size of HEIGHT / 2

// dimensions are WIDTH x HEIGHT
Texture2D<float3> Src;
RWStructuredBuffer<Complex> Intermediate;   // 1D buffer to represent 2D data
RWTexture2D<float3> IntermediateTexture;
RWStructuredBuffer<Complex> Final;          // 1D buffer to represent 2D data
RWTexture2D<float3> FinalTexture;

Complex ComplexAdd(Complex a, Complex b)
{
    Complex sum;
    sum.real = a.real + b.real;
    sum.imag = a.imag + b.imag;
    return sum;
}

Complex ComplexSub(Complex a, Complex b)
{
    Complex sum;
    sum.real = a.real - b.real;
    sum.imag = a.imag - b.imag;
    return sum;
}

Complex ComplexMult(Complex a, Complex b)
{
    Complex prod;
    prod.real = (a.real * b.real) - (a.imag * b.imag);
    prod.imag = (a.real * b.imag) + (a.imag * b.real);
    return prod;
}

float ComplexMagnitude(Complex a)
{
    return sqrt(a.real * a.real + a.imag * a.imag);
}

Complex ComplexConjugate(Complex a)
{
    Complex b;
    b.real = a.real;
    b.imag = -a.imag;
    return b;
}

[numthreads(1, 8, 1)]
void SolveRow (uint3 id : SV_DispatchThreadID)
{
    Complex temp[TEMP_SIZE];
    uint offsetByRow = id.y * WIDTH;

    for (uint i = 0; i < WIDTH; ++i)
    {
        uint2 pos = uint2(BitRevRow[i], id.y);
        float data = (Src[pos].r + Src[pos].g + Src[pos].b) / 3.0;
        if ((BitRevRow[i] + id.y) % 2 == 1)
        {
            Intermediate[offsetByRow + i].real = -data;
        }
        else
        {
            Intermediate[offsetByRow + i].real = data;
        }
        Intermediate[offsetByRow + i].imag = 0;
    }

    for (uint numElements = 2; numElements <= WIDTH; numElements *= 2)
    {
        for (uint offset = 0; offset < WIDTH; offset += numElements)
        {
            for (uint j = 0; j < numElements; ++j)
            {
                temp[j] = Intermediate[offsetByRow + offset + j];
            }

            uint halfNumElements = numElements / 2;
            for (uint i = 0; i < halfNumElements; ++i)
            {
                Complex upperHalf = ComplexMult(temp[i + halfNumElements], TwiddleRow[i * WIDTH / numElements]);
                Intermediate[offsetByRow + i + offset] = ComplexAdd(temp[i], upperHalf);
                Intermediate[offsetByRow + i + offset + halfNumElements] = ComplexSub(temp[i], upperHalf);
            }
        }
    }

    for (uint j = 0; j < WIDTH; ++j)
    {
        float val = ComplexMagnitude(Intermediate[offsetByRow + j]);
        val = log10(val * 1000 + 1) / 6;
        IntermediateTexture[uint2(j, id.y)] = float3(val, val, val);
    }
}

[numthreads(8, 1, 1)]
void SolveCol(uint3 id : SV_DispatchThreadID)
{
    Complex temp[TEMP_SIZE];

    for (uint i = 0; i < HEIGHT; ++i)
    {
        Final[(i * WIDTH) + id.x] = Intermediate[(BitRevCol[i] * WIDTH) + id.x];
    }

    for (uint numElements = 2; numElements <= HEIGHT; numElements *= 2)
    {
        for (uint offset = 0; offset < HEIGHT; offset += numElements)
        {
            for (uint j = 0; j < numElements; ++j)
            {
                temp[j] = Final[((offset + j) * WIDTH) + id.x];
            }

            uint halfNumElements = numElements / 2;
            for (uint i = 0; i < halfNumElements; ++i)
            {
                Complex upperHalf = ComplexMult(temp[i + halfNumElements], TwiddleCol[i * HEIGHT / numElements]);
                Final[((i + offset) * WIDTH) + id.x] = ComplexAdd(temp[i], upperHalf);
                Final[((i + offset + halfNumElements) * WIDTH) + id.x] = ComplexSub(temp[i], upperHalf);
            }
        }
    }

    for (uint j = 0; j < HEIGHT; ++j)
    {
        float val = ComplexMagnitude(Final[(j * WIDTH) + id.x]);
        val = log10(val * 1000 + 1) / 6;
        FinalTexture[uint2(id.x, j)] = float3(val, val, val);
    }
}
